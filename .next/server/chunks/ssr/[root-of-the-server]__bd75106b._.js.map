{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///Users/betelhemseleshi/NextJs/nextjs-dashboard/app/lib/utils.ts"],"sourcesContent":["import { Revenue } from './definitions';\n\nexport const formatCurrency = (amount: number) => {\n  return (amount / 100).toLocaleString('en-US', {\n    style: 'currency',\n    currency: 'USD',\n  });\n};\n\nexport const formatDateToLocal = (\n  dateStr: string,\n  locale: string = 'en-US',\n) => {\n  const date = new Date(dateStr);\n  const options: Intl.DateTimeFormatOptions = {\n    day: 'numeric',\n    month: 'short',\n    year: 'numeric',\n  };\n  const formatter = new Intl.DateTimeFormat(locale, options);\n  return formatter.format(date);\n};\n\nexport const generateYAxis = (revenue: Revenue[]) => {\n  // Calculate what labels we need to display on the y-axis\n  // based on highest record and in 1000s\n  const yAxisLabels = [];\n  const highestRecord = Math.max(...revenue.map((month) => month.revenue));\n  const topLabel = Math.ceil(highestRecord / 1000) * 1000;\n\n  for (let i = topLabel; i >= 0; i -= 1000) {\n    yAxisLabels.push(`$${i / 1000}K`);\n  }\n\n  return { yAxisLabels, topLabel };\n};\n\nexport const generatePagination = (currentPage: number, totalPages: number) => {\n  // If the total number of pages is 7 or less,\n  // display all pages without any ellipsis.\n  if (totalPages <= 7) {\n    return Array.from({ length: totalPages }, (_, i) => i + 1);\n  }\n\n  // If the current page is among the first 3 pages,\n  // show the first 3, an ellipsis, and the last 2 pages.\n  if (currentPage <= 3) {\n    return [1, 2, 3, '...', totalPages - 1, totalPages];\n  }\n\n  // If the current page is among the last 3 pages,\n  // show the first 2, an ellipsis, and the last 3 pages.\n  if (currentPage >= totalPages - 2) {\n    return [1, 2, '...', totalPages - 2, totalPages - 1, totalPages];\n  }\n\n  // If the current page is somewhere in the middle,\n  // show the first page, an ellipsis, the current page and its neighbors,\n  // another ellipsis, and the last page.\n  return [\n    1,\n    '...',\n    currentPage - 1,\n    currentPage,\n    currentPage + 1,\n    '...',\n    totalPages,\n  ];\n};\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,iBAAiB,CAAC;IAC7B,OAAO,CAAC,SAAS,GAAG,EAAE,cAAc,CAAC,SAAS;QAC5C,OAAO;QACP,UAAU;IACZ;AACF;AAEO,MAAM,oBAAoB,CAC/B,SACA,SAAiB,OAAO;IAExB,MAAM,OAAO,IAAI,KAAK;IACtB,MAAM,UAAsC;QAC1C,KAAK;QACL,OAAO;QACP,MAAM;IACR;IACA,MAAM,YAAY,IAAI,KAAK,cAAc,CAAC,QAAQ;IAClD,OAAO,UAAU,MAAM,CAAC;AAC1B;AAEO,MAAM,gBAAgB,CAAC;IAC5B,yDAAyD;IACzD,uCAAuC;IACvC,MAAM,cAAc,EAAE;IACtB,MAAM,gBAAgB,KAAK,GAAG,IAAI,QAAQ,GAAG,CAAC,CAAC,QAAU,MAAM,OAAO;IACtE,MAAM,WAAW,KAAK,IAAI,CAAC,gBAAgB,QAAQ;IAEnD,IAAK,IAAI,IAAI,UAAU,KAAK,GAAG,KAAK,KAAM;QACxC,YAAY,IAAI,CAAC,CAAC,CAAC,EAAE,IAAI,KAAK,CAAC,CAAC;IAClC;IAEA,OAAO;QAAE;QAAa;IAAS;AACjC;AAEO,MAAM,qBAAqB,CAAC,aAAqB;IACtD,6CAA6C;IAC7C,0CAA0C;IAC1C,IAAI,cAAc,GAAG;QACnB,OAAO,MAAM,IAAI,CAAC;YAAE,QAAQ;QAAW,GAAG,CAAC,GAAG,IAAM,IAAI;IAC1D;IAEA,kDAAkD;IAClD,uDAAuD;IACvD,IAAI,eAAe,GAAG;QACpB,OAAO;YAAC;YAAG;YAAG;YAAG;YAAO,aAAa;YAAG;SAAW;IACrD;IAEA,iDAAiD;IACjD,uDAAuD;IACvD,IAAI,eAAe,aAAa,GAAG;QACjC,OAAO;YAAC;YAAG;YAAG;YAAO,aAAa;YAAG,aAAa;YAAG;SAAW;IAClE;IAEA,kDAAkD;IAClD,wEAAwE;IACxE,uCAAuC;IACvC,OAAO;QACL;QACA;QACA,cAAc;QACd;QACA,cAAc;QACd;QACA;KACD;AACH","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file:///Users/betelhemseleshi/NextJs/nextjs-dashboard/app/lib/data.ts"],"sourcesContent":["// app/lib/data.ts\nimport postgres from 'postgres';\nimport { formatCurrency } from './utils';\nimport { Revenue, LatestInvoiceRaw, InvoiceData } from './definitions'; // adjust types if you have them\n\n// connect to Postgres\nconst sql = postgres(\"postgresql://postgres:noah@localhost:5432/financial_dashboard\");\n\nexport async function fetchRevenue(): Promise<Revenue[]> {\n  try {\n    const data: Revenue[] = await sql<Revenue[]>`SELECT * FROM revenue ORDER BY month`;\n    return data;\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch revenue data.');\n  }\n}\n\nexport async function fetchLatestInvoices(): Promise<LatestInvoiceRaw[]> {\n  try {\n    const data: LatestInvoiceRaw[] = await sql<LatestInvoiceRaw[]>`\n      SELECT i.id, i.amount, c.name, c.email, c.image_url\n      FROM invoices i\n      JOIN customers c ON i.customer_id = c.id\n      ORDER BY i.date DESC\n      LIMIT 5\n    `;\n\n    return data.map((invoice) => ({\n      ...invoice,\n      amount: formatCurrency(invoice.amount),\n    }));\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch latest invoices.');\n  }\n}\n\nexport async function fetchCardData() {\n  try {\n    const [invoiceCountRes, customerCountRes, invoiceStatusRes] = await Promise.all([\n      sql`SELECT COUNT(*) FROM invoices`,\n      sql`SELECT COUNT(*) FROM customers`,\n      sql`\n        SELECT\n          SUM(CASE WHEN status = 'paid' THEN amount ELSE 0 END) AS paid,\n          SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END) AS pending\n        FROM invoices\n      `,\n    ]);\n\n    const numberOfInvoices = Number(invoiceCountRes[0].count ?? 0);\n    const numberOfCustomers = Number(customerCountRes[0].count ?? 0);\n    const totalPaidInvoices = formatCurrency(invoiceStatusRes[0].paid ?? 0);\n    const totalPendingInvoices = formatCurrency(invoiceStatusRes[0].pending ?? 0);\n\n    return { numberOfInvoices, numberOfCustomers, totalPaidInvoices, totalPendingInvoices };\n  } catch (error) {\n    console.error('Database Error:', error);\n    throw new Error('Failed to fetch card data.');\n  }\n}\n"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;AAClB;AACA;;;AAGA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,6LAAA,CAAA,UAAQ,AAAD,EAAE;AAEd,eAAe;IACpB,IAAI;QACF,MAAM,OAAkB,MAAM,GAAc,CAAC,oCAAoC,CAAC;QAClF,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,OAA2B,MAAM,GAAuB,CAAC;;;;;;IAM/D,CAAC;QAED,OAAO,KAAK,GAAG,CAAC,CAAC,UAAY,CAAC;gBAC5B,GAAG,OAAO;gBACV,QAAQ,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,QAAQ,MAAM;YACvC,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,CAAC,iBAAiB,kBAAkB,iBAAiB,GAAG,MAAM,QAAQ,GAAG,CAAC;YAC9E,GAAG,CAAC,6BAA6B,CAAC;YAClC,GAAG,CAAC,8BAA8B,CAAC;YACnC,GAAG,CAAC;;;;;MAKJ,CAAC;SACF;QAED,MAAM,mBAAmB,OAAO,eAAe,CAAC,EAAE,CAAC,KAAK,IAAI;QAC5D,MAAM,oBAAoB,OAAO,gBAAgB,CAAC,EAAE,CAAC,KAAK,IAAI;QAC9D,MAAM,oBAAoB,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,gBAAgB,CAAC,EAAE,CAAC,IAAI,IAAI;QACrE,MAAM,uBAAuB,CAAA,GAAA,mHAAA,CAAA,iBAAc,AAAD,EAAE,gBAAgB,CAAC,EAAE,CAAC,OAAO,IAAI;QAE3E,OAAO;YAAE;YAAkB;YAAmB;YAAmB;QAAqB;IACxF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,MAAM,IAAI,MAAM;IAClB;AACF","debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/betelhemseleshi/NextJs/nextjs-dashboard/app/dashboard/page.tsx"],"sourcesContent":["import { Card } from '@/app/ui/dashboard/cards';\nimport RevenueChart from '@/app/ui/dashboard/revenue-chart';\nimport LatestInvoices from '@/app/ui/dashboard/latest-invoices';\nimport { lusitana } from '@/app/ui/fonts';\nimport {fetchRevenue} from '@/app/lib/data';\n \nexport default async function Page() {\n  const revenue = await fetchRevenue();\n  return (\n    <main>\n      <h1 className={`${lusitana.className} mb-4 text-xl text-pink-400 md:text-2xl`}>\n        Dashboard\n      </h1>\n      <div className=\"grid gap-6 sm:grid-cols-2 lg:grid-cols-4\">\n        {/* <Card title=\"Collected\" value={totalPaidInvoices} type=\"collected\" /> */}\n        {/* <Card title=\"Pending\" value={totalPendingInvoices} type=\"pending\" /> */}\n        {/* <Card title=\"Total Invoices\" value={numberOfInvoices} type=\"invoices\" /> */}\n        {/* <Card\n          title=\"Total Customers\"\n          value={numberOfCustomers}\n          type=\"customers\"\n        /> */}\n      </div>\n      <div className=\"col-span-1 bg-white p-6 rounded-2xl shadow-md hover:shadow-xl transition-shadow duration-300\">\n          <h2 className=\"text-lg font-semibold text-gray-700 mb-4\">Latest Invoices</h2>\n          {/* Uncomment when latestInvoices data is available */}\n          {/* <LatestInvoices latestInvoices={latestInvoices} /> */}\n          <p className=\"text-gray-400\">No invoices to display yet.</p>\n        </div>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAGA;AAAA;AACA;;;;AAEe,eAAe;IAC5B,MAAM,UAAU,MAAM,CAAA,GAAA,kHAAA,CAAA,eAAY,AAAD;IACjC,qBACE,6WAAC;;0BACC,6WAAC;gBAAG,WAAW,GAAG,mLAAA,CAAA,WAAQ,CAAC,SAAS,CAAC,uCAAuC,CAAC;0BAAE;;;;;;0BAG/E,6WAAC;gBAAI,WAAU;;;;;;0BAUf,6WAAC;gBAAI,WAAU;;kCACX,6WAAC;wBAAG,WAAU;kCAA2C;;;;;;kCAGzD,6WAAC;wBAAE,WAAU;kCAAgB;;;;;;;;;;;;;;;;;;AAIvC","debugId":null}}]
}